version: '2.2'

networks:
  vpn:

services:
  pia:
    container_name: pia
    image: conlon/pia-openvpn:latest
    command: --auth-user-pass auth.conf
    cap_add:
      - net_admin
    devices:
      - /dev/net/tun
    dns:
      - 209.222.18.222
      - 209.222.18.218
    volumes:
      - "${PIA_AUTH_CONF}:/etc/openvpn/auth.conf:Z"
    networks:
      - vpn
    ports:
      - 8112:8112
      #- 58846:58846
    logging:
      options:
        max-size: "200m"
        max-file: "10"
    environment:
      REGION: "${PIA_REGION}"
      STRONG_ENCRYPT: "${PIA_STRONG_ENCRYPT}"
      LOCAL_NETWORK: "${PIA_LOCAL_NETWORK_CIDR}"
    restart: unless-stopped

  deluge:
    container_name: deluge
    image: linuxserver/deluge:latest
  #  image: linuxserver/deluge:136
  #  command: -L warning
    depends_on:
      - pia
    network_mode: "container:pia"
    #network_mode: "service:pia"
    volumes:
      - "${DELUGE_CONFIG}:/config"
      - "${MEDIA_ROOT}:/media"
    logging:
      options:
        max-size: "200m"
        max-file: "10"
    environment:
      TZ: "${TIMEZONE}"
      PUID: "${PID}"
      GUID: "${GID}"
    #cpus: 1.5
    cpu_percent: 75 #only v2, and v3 only supports swarm limits :(
    restart: unless-stopped
 
  nginx:
    container_name: nginx
    image: dperson/nginx:latest
    ports:
      - 80:80
    command: -w "http://deluge:8112;/deluge" -n "localhost"
    restart: unless-stopped

#  plex:
#    container_name: plex
#    image: plexinc/pms-docker:latest
#    network_mode: host
#    volumes:
#      - "${PLEX_CONFIG}:/config"
#      - "${PLEX_TRANSCODE}:/transcode"
#      - "${MEDIA_ROOT}:/data"
#    environment:
#      TZ: "${TIMEZONE}"
#      PLEX_CLAIM: "${PLEX_CLAIM}"
#      HOSTNAME: "${PLEX_HOSTNAME}"
#      PLEX_UID: "${PID}"
#      PLEX_GID: "${GID}"
#    restart: unless-stopped

  sonarr:
    container_name: sonarr
    image: linuxserver/sonarr:latest
    network_mode: host
    volumes:
      #- /etc/localtime:/etc/localtime:ro # either this or TZ env var is required
      - "${SONARR_CONFIG}:/config"
      - "${MEDIA_ROOT}:/media"
    environment:
      TZ: "${TIMEZONE}"
      PUID: "${PID}"
      GUID: "${GID}"
    ports:
      - 8989:8989
      - 8988:8988
    logging:
      options:
        max-size: "200m"
        max-file: "10"
    cpu_percent: 50
    restart: unless-stopped

  radarr:
    container_name: radarr
    image: linuxserver/radarr:latest
    network_mode: host
    volumes:
      #- /etc/localtime:/etc/localtime:ro # either this or TZ env var is required
      - "${RADARR_CONFIG}:/config"
      - "${MEDIA_ROOT}:/media"
    environment:
      TZ: "${TIMEZONE}"
      PUID: "${PID}"
      GUID: "${GID}"
    ports:
      - 7878:7878
      - 7877:7877
    logging:
      options:
        max-size: "200m"
        max-file: "10"
    cpu_percent: 50
    restart: unless-stopped

  jackett:
    container_name: jackett
    image: linuxserver/jackett:latest
    network_mode: host
    volumes:
      - "${JACKETT_CONFIG}:/config"
      - "${JACKETT_BLACKHOLE}:/downloads"
    environment:
      TZ: "${TIMEZONE}"
      PUID: "${PID}"
      GUID: "${GID}"
    ports:
      - 9117:9117
    logging:
      options:
        max-size: "200m"
        max-file: "10"
    restart: unless-stopped

  datadog:
    container_name: datadog
    image: datadog/docker-dd-agent:latest
    network_mode: host
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - /proc/:/host/proc/:ro
      - /sys/fs/cgroup/:/host/sys/fs/cgroup:ro
      - /opt/datadog/conf.d:/conf.d:ro
    logging:
      options:
        max-size: "200m"
        max-file: "10"
    environment:
      API_KEY: "${DATADOG_API_KEY}"
      SD_BACKEND: docker
      NON_LOCAL_TRAFFIC: "false"
      DD_PROCESS_AGENT_ENABLED: "true"
    restart: unless-stopped

  sync:
    container_name: sync
    image: resilio/sync
    restart: always
    environment:
      PUID: "${PID}"
      GUID: "${GID}"
    ports:
      - 9999:8888 # web ui
      - 55555:55555/tcp
      - 55555:55555/udp
    volumes:
      #- sync_storage:/mnt/sync/storage     # Sync storage folder
      #- ./sync.conf:/mnt/sync/sync.conf    # Configuration file
      #- $SYNC_DATA:/mnt/sync/data          # folder with data to be shared
      - "${SYNC_STORAGE}:/mnt/sync"         # Sync storage folder
      #- "${SYNC_CONF}:/mnt/sync/sync.conf"  # Configuration file
      - "${MEDIA_ROOT}/${MUSIC_DIR_1}:/mnt/mounted_folders/${MUSIC_DIR_1}"
      - "${MEDIA_ROOT}/${MUSIC_DIR_2}:/mnt/mounted_folders/${MUSIC_DIR_2}"

#  cadvisor:
#    container_name: cadvisor
#    image: google/cadvisor:latest
#    volumes:
#      - /:/rootfs:ro
#      - /var/run:/var/run:rw
#      - /sys:/sys:ro
#      - /var/lib/docker/:/var/lib/docker:ro
#    ports:
#      - 8080:8080
